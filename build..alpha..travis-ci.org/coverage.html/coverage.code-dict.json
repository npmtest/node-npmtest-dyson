{"/home/travis/build/npmtest/node-npmtest-dyson/test.js":"/* istanbul instrument in package npmtest_dyson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dyson/lib.npmtest_dyson.js":"/* istanbul instrument in package npmtest_dyson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_dyson = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_dyson = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-dyson/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-dyson && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_dyson */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_dyson\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_dyson.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_dyson.rollup.js'] =\n            local.assetsDict['/assets.npmtest_dyson.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_dyson.__dirname +\n                    '/lib.npmtest_dyson.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/dyson.js":"const https = require('https'),\n  express = require('express'),\n  favicon = require('serve-favicon'),\n  bodyParser = require('body-parser'),\n  cookieParser = require('cookie-parser'),\n  cors = require('cors'),\n  rawBody = require('./raw-body'),\n  loader = require('./loader'),\n  defaults = require('./defaults'),\n  delay = require('./delay'),\n  proxy = require('./proxy'),\n  util = require('./util'),\n  requireParameter = require('./parameter');\n\n/*\n * There are roughly 3 steps to initialize dyson:\n *\n * 1. Load user configurations + mix-in defaults\n * 2. Create Express server\n * 3. Register configured services with Express\n */\nconst bootstrap = options => {\n  const configs = getConfigurations(options);\n  const app = createServer(options);\n  return registerServices(app, options, configs);\n};\n\nconst getConfigurations = options => {\n  const rawConfigs = loader.load(options.configDir);\n\n  return defaults.assignToAll(rawConfigs);\n};\n\nconst createServer = options => {\n  const app = express();\n  let server;\n\n  if(options.https) {\n    server = https.createServer(options.https, app).listen(options.port);\n  } else {\n    server = app.listen(options.port);\n  }\n\n  app.set('dyson_server', server);\n  return app;\n};\n\nconst setConfig = config => (req, res, next) => {\n  res.locals.config = config;\n  next();\n};\n\n// Register middleware to Express as service for each config (as in: `app.get(config.path, config.callback);`)\nconst registerServices = (app, options, configs) => {\n\n  app.set('dyson_options', options);\n\n  app.use(cors({ origin: true, credentials: true }));\n  app.use(rawBody());\n  app.use(cookieParser());\n  app.use(favicon(`${__dirname}/favicon.ico`));\n\n  const bodyParserOptions = options.bodyParserJsonLimit ? { limit: options.bodyParserJsonLimit } : {};\n  app.use(bodyParser.json(bodyParserOptions));\n\n  const bodyParserUrlOptions = { extended: true };\n  bodyParserUrlOptions.limit = options.bodyParserUrlencodedLimit ? options.bodyParserUrlencodedLimit : null;\n  app.use(bodyParser.urlencoded(bodyParserUrlOptions));\n\n  Object.keys(configs).forEach(method => {\n\n    configs[method].forEach(config => {\n\n      if(options.proxy === true && config.proxy !== false) {\n\n        // Allows each config file to be bypassed without removing it\n        util.log('Proxying', method.toUpperCase(), 'service at', config.path);\n\n      } else {\n\n        const middlewares = [\n          setConfig(config),\n          requireParameter,\n          config.callback,\n          delay(config.delay),\n          config.render\n        ];\n\n        util.log('Registering', method.toUpperCase(), 'service at', config.path);\n        app[method].apply(app, [config.path].concat(middlewares));\n\n        if(method !== 'options') {\n          app.options(config.path, cors({ origin: true, credentials: true }));\n        }\n      }\n    });\n  });\n\n  if(options.proxy) {\n\n    app.all('*', delay(options.proxyDelay), proxy.middleware);\n\n  } else {\n\n    !util.isTest() && app.all('*', (req, res) => {\n      console.error(`404 NOT FOUND: ${req.url}`);\n      res.writeHead(404);\n      res.end();\n    });\n  }\n\n  return app;\n};\n\nmodule.exports = {\n  bootstrap,\n  getConfigurations,\n  createServer,\n  registerServices\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/raw-body.js":"module.exports = ({ property = 'rawBody' } = {}) => {\n  return (req, res, next) => {\n    let data = '';\n    req.on('data', chunk => {\n      data += chunk;\n    });\n    req.on('end', () => {\n      req[property] = data;\n    });\n    next();\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/loader.js":"const _ = require('lodash'),\n  requireDir = require('require-directory'),\n  path = require('path');\n\nconst methods = ['get', 'post', 'put', 'delete', 'patch', 'options'];\n\nconst load = configDir => {\n  const rawConfigs = requireDir(module, path.resolve(configDir)),\n    configs = {};\n  methods.forEach(method => {\n    configs[method] = _.flattenDeep(findRecursive(rawConfigs, method));\n  });\n\n  return configs;\n};\n\nconst findRecursive = (obj, method) => {\n  const configs = [];\n  for(const key in obj) {\n    if(_.isObject(obj[key])) {\n      if('path' in obj[key]) {\n        if(obj.__method === method || (obj[key].method && obj[key].method.toLowerCase() === method)) {\n          configs.push(obj[key]);\n        }\n      } else {\n        obj[key].__method = key === method ? method : obj.__method;\n        configs.push(findRecursive(obj[key], method));\n      }\n    }\n  }\n  return configs;\n};\n\nmodule.exports = {\n  load\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/defaults.js":"const response = require('./response'),\n  _ = require('lodash');\n\nconst defaults = {},\n  methods = ['get', 'post', 'put', 'delete', 'patch', 'options'];\nmethods.forEach(method => {\n  defaults[method] = {\n    cache: false,\n    delay: false,\n    proxy: false,\n    size: () => _.random(2, 10),\n    collection: false,\n    callback: response.generate,\n    render: response.render\n  };\n});\n\ndefaults.get.cache = true;\n\nconst assignToAll = rawConfigs => {\n  const configs = {};\n  methods.forEach(method => {\n    configs[method] = assign(rawConfigs[method], method);\n  });\n\n  return configs;\n};\n\nconst assign = (configs, method) => {\n  configs = _.isArray(configs) ? configs : [configs];\n  return _.compact(configs.map(config => {\n    if(!config || !config.path) {\n      return;\n    }\n\n    // Assign method specific defaults\n    config = _.defaults(config, defaults[method]);\n\n    // Bind each method to the config itself\n    return _.bindAll(config);\n  }));\n\n};\n\nmodule.exports = {\n  assignToAll,\n  assign\n};","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/response.js":"const multiRequest = require('./multiRequest'),\n  util = require('./util'),\n  _ = require('lodash'),\n  when = require('when');\n\nconst cache = {};\n\nconst generate = (req, res, next) => {\n\n  const service = res.locals.config,\n    options = res.app.get('dyson_options'),\n    path = req.url,\n    exposeRequest = service.exposeRequest || options.exposeRequest && service.exposeRequest !== false;\n\n  const templateArgs = exposeRequest ? [req] : [req.params, req.query, req.body, req.cookies, req.headers],\n    containerArgs = exposeRequest ? [req] : [req.params, req.query];\n\n  if(_.isFunction(service.status)) {\n    service.status.apply(service, [req, res, next]);\n  }\n\n  if(!(service.cache && cache[path])) {\n    if(!multiRequest.isMultiRequest(path, options)) {\n      const isCollection = _.isFunction(service.collection) ? service.collection.apply(service, templateArgs) : service.collection,\n        template = _.isFunction(service.template) ? service.template.apply(service, templateArgs) : service.template;\n      let promise;\n\n      if(!isCollection) {\n        promise = setValues(template, templateArgs);\n      } else {\n        const size = _.isFunction(service.size) ? service.size.apply(service, templateArgs) : service.size;\n        promise = when.map(_.times(parseInt(size, 10)), () => setValues(template, templateArgs));\n      }\n\n      promise.then(data => {\n        return !service.container ? data : setValues(_.result(service, 'container'), containerArgs.concat([data]), service);\n      }).then(data => {\n        res.body = cache[path] = data;\n        util.log('Resolving response for', req.method, path);\n        next();\n      });\n\n    } else {\n      when.all(multiRequest.doMultiRequest(req, path)).then(data => {\n        res.body = cache[path] = data;\n        util.log('Resolving response for:', req.method, path, '(multiRequest)');\n        next();\n      });\n    }\n\n  } else {\n    util.log('Resolving response for', req.method, path, '(cached)');\n    res.body = cache[path];\n    next();\n  }\n};\n\nconst setValues = (template = null, params, scope) => {\n  return when.promise(resolve => {\n    const promises = [],\n      obj = _.isArray(template) ? [] : Object.create(template);\n    _.forEach(template, (value, key) => {\n      if(template.hasOwnProperty(key)) {\n        obj[key] = _.isFunction(value) ? value.apply(scope || obj, params) : _.isPlainObject(value) ? setValues(value, params, obj) : value;\n        if(when.isPromiseLike(obj[key])) {\n          promises.push(obj[key]);\n          obj[key].then(function(key, value) {\n            obj[key] = value;\n          }.bind(obj, key));\n        }\n      }\n    });\n    when.all(promises).then(() => resolve(obj));\n  });\n};\n\nconst render = (req, res) => {\n  res.send(res.body);\n};\n\nmodule.exports = {\n  generate,\n  render,\n  setValues\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/multiRequest.js":"const when = require('when'),\n  http = require('http');\n\nconst isMultiRequest = (path, options) => {\n  const delimiter = options.multiRequest;\n  if(!delimiter) {\n    return false;\n  }\n  return path.split('/').find(fragment => fragment.includes(delimiter));\n};\n\nconst doMultiRequest = (req, path) => {\n  const options = req.app.get('dyson_options'),\n    host = req.headers.host.split(':'),\n    hostname = host[0],\n    port = host[1],\n    delimiter = options.multiRequest,\n    promises = [],\n    range = isMultiRequest(path, options);\n\n  range.split(delimiter).forEach((id, index, list) => {\n    const d = when.defer(),\n      url = path.replace(list, id);\n    let data = '';\n\n    promises.push(d.promise);\n\n    http.get({ hostname, port, path: url }, res => {\n      res.on('data', chunk => {\n        data += chunk;\n      });\n      res.on('end', () => {\n        d.resolve(JSON.parse(data));\n      });\n    }).on('error', error => {\n      /* eslint-disable no-console */\n      console.error(error.message);\n    });\n  });\n\n  return promises;\n\n};\n\nmodule.exports = {\n  isMultiRequest,\n  doMultiRequest\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/util.js":"/* eslint-disable no-console */\n\nconst isTest = () => {\n  return process.env.NODE_ENV === 'test';\n};\n\nconst log = function() {\n  if(!isTest()) {\n    console.log.apply(console, arguments);\n  }\n};\n\nmodule.exports = {\n  isTest,\n  log\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/delay.js":"const _ = require('lodash');\n\nmodule.exports = delay => (req, res, next) => {\n  if(typeof delay === 'number') {\n    _.delay(next, delay);\n  } else if(_.isArray(delay)) {\n    _.delay(next, _.random.apply(null, delay));\n  } else {\n    next();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/proxy.js":"const request = require('request'),\n  Stream = require('stream'),\n  util = require('./util'),\n  _ = require('lodash');\n\nconst proxyMiddleware = (req, res) => {\n  const options = req.app.get('dyson_options'),\n    proxyHost = options.proxyHost,\n    proxyPort = options.proxyPort,\n    proxyURI = `${proxyHost}${proxyPort ? `:${proxyPort}` : ''}${req.url}`;\n  let readStream;\n  util.log('Proxying', req.url, 'to', proxyURI);\n  if(req._body) {\n    readStream = new Stream.Readable();\n    readStream._read = function() {\n      this.push(req.rawBody);\n      this.push(null);\n    };\n  } else {\n    readStream = req;\n  }\n\n  readStream.pipe(request({\n    method: req.method,\n    url: proxyURI,\n    headers: _.omit(req.headers, ['host'])\n  }, error => {\n    if(error) {\n      console.error(`500 INTERNAL SERVER ERROR: ${proxyURI}`);\n      console.error(error);\n      res.writeHead(500);\n      res.end();\n    }\n  })).pipe(res);\n};\n\nmodule.exports = {\n  middleware: proxyMiddleware\n};\n","/home/travis/build/npmtest/node-npmtest-dyson/node_modules/dyson/lib/parameter.js":"const _ = require('lodash');\n\nmodule.exports = (req, res, next) => {\n  const requireParameters = res.locals.config.requireParameters;\n  if(!_.isEmpty(requireParameters)) {\n    const missingParameters = requireParameters.filter(parameter => {\n      return _.isEmpty(req.body[parameter]) && _.isEmpty(req.query[parameter]);\n    });\n\n    if(!_.isEmpty(missingParameters)) {\n      res.status(400).send({ error: `Required parameters (${missingParameters.join(', ')}) not found.` });\n    }\n  }\n  next();\n};\n"}